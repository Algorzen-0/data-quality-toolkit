apiVersion: apps/v1
kind: Deployment
metadata:
  name: algorzen-dqt
  namespace: algorzen-dqt
  labels:
    app: algorzen-dqt
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: algorzen-dqt
  template:
    metadata:
      labels:
        app: algorzen-dqt
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: algorzen-dqt
        image: algorzen/algorzen-dqt:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        - containerPort: 8787
          name: dask-dashboard
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: LOG_LEVEL
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: algorzen-dqt-secrets
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: algorzen-dqt-secrets
              key: DATABASE_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: REDIS_PORT
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: algorzen-dqt-config
              key: KAFKA_BOOTSTRAP_SERVERS
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: algorzen-dqt-secrets
              key: JWT_SECRET_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: config-volume
          mountPath: /app/config
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: algorzen-dqt-data
      - name: config-volume
        configMap:
          name: algorzen-dqt-config
      restartPolicy: Always
